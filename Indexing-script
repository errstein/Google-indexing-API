<p style="text-align: justify;"><b>IndexErr</b> -  Tool Google Indexing API praktis buatan <b><a href="https://www.errstein.com/" target="_blank">Errstein.com</a></b> yang dirancang untuk mempercepat proses indexing artikel kamu di Google. Dengan memanfaatkan Google Indexing API secara langsung, kamu dapat mengirimkan URL postingan baru, artikel yang baru diperbarui, atau bahkan mengekstrak semua link dari sitemap untuk diproses secara massal <b>Maksimal 100 URL Per Request</b>, memastikan konten kamu lebih cepat terindek oleh <a href="https://www.google.com/" rel="nofollow" target="_blank"><b>Google</b></a> tanpa harus menunggu proses crawl alami.</p>

<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
      Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  }
  .tool-container {
    max-width: 800px;
    margin: 20px auto;
    padding: 25px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  .tool-container h2 {
    text-align: center;
    color: #333;
    border-bottom: 2px solid #eee;
    padding-bottom: 10px;
    margin-top: 0;
  }
  .tool-container h3 {
    color: #444;
    margin-top: 25px;
    border-left: 4px solid #007bff;
    padding-left: 10px;
  }
  .input-group {
    margin-bottom: 20px;
  }
  .input-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: #555;
  }
  .input-group input[type="text"],
  .input-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 14px;
  }
  .input-group textarea {
    height: 150px;
    resize: vertical;
  }
  .sitemap-extractor {
    display: flex;
    gap: 10px;
  }
  .sitemap-extractor input {
    flex-grow: 1;
  }
  .btn {
    display: inline-block;
    padding: 10px 18px;
    border: none;
    border-radius: 4px;
    color: #fff;
    background-color: #007bff;
    cursor: pointer;
    font-size: 16px;
    text-align: center;
    transition: background-color 0.3s;
  }
  .btn:hover {
    background-color: #0056b3;
  }
  .btn-submit {
    width: 100%;
    padding: 12px;
    font-size: 18px;
    background-color: #28a745;
  }
  .btn-submit:hover {
    background-color: #218838;
  }
  .btn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  #log-output {
    margin-top: 20px;
    padding: 15px;
    background-color: #2c3e50;
    color: #ecf0f1;
    border-radius: 4px;
    height: 200px;
    overflow-y: auto;
    font-family: "Courier New", Courier, monospace;
    font-size: 13px;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  .log-success { color: #2ecc71; }
  .log-error { color: #e74c3c; }
  .log-info { color: #3498db; }
  #sitemap-status {
    font-size: 12px;
    margin-top: 5px;
    color: #888;
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/jsrsasign@11.1.0/lib/jsrsasign.min.js"></script>

<div class="tool-container">
  <h2>Google Indexing API by Errstein</h2>

  <h3>1. Ekstrak URL dari Sitemap (Opsional)</h3>
  <div class="input-group">
    <label>Masukkan URL Sitemap.xml kamu:</label>
    <div class="sitemap-extractor">
      <input id="sitemap-url" placeholder="https://domain-kamu.com/sitemap.xml" type="text" />
      <button class="btn" id="extract-btn">Ekstrak URL</button>
    </div>
    <p id="sitemap-status">
      Status: Menunggu input sitemap...
    </p>
  </div>

  <h3>2. Tempel Konten File JSON Indexing API</h3>
  <div class="input-group">
    <label>Buka file JSON kamu, salin semuanya, dan tempel di sini:</label>
    <textarea id="api-key" placeholder="{ &quot;type&quot;: &quot;service_account&quot;, &quot;project_id&quot;: &quot;...&quot;, &quot;private_key_id&quot;: &quot;...&quot;, ... }"></textarea>
  </div>

  <h3>3. Daftar URL untuk Dikirim</h3>
  <div class="input-group">
    <label>Masukkan satu URL per baris (Maksimal 100 URL per permintaan):</label>
    <textarea id="url-list" placeholder="https://domain-kamu.com/artikel-1.html
https://domain-kamu.com/artikel-2.html"></textarea>
  </div>

  <button class="btn btn-submit" id="submit-btn">🚀 IndexNow!</button>
  <div id="log-output">LOG: Menunggu proses dimulai...</div>
</div>

<script>
  // Ambil elemen dari halaman
  const sitemapUrlInput = document.getElementById("sitemap-url");
  const extractBtn = document.getElementById("extract-btn");
  const sitemapStatus = document.getElementById("sitemap-status");
  const apiKeyTextarea = document.getElementById("api-key");
  const urlListTextarea = document.getElementById("url-list");
  const submitBtn = document.getElementById("submit-btn");
  const logOutput = document.getElementById("log-output");

  // Fungsi untuk menampilkan log
  function log(message, type = "") {
    const p = document.createElement("p");
    p.textContent = message;
    if (type) {
      p.className = `log-${type}`;
    }
    logOutput.appendChild(p);
    logOutput.scrollTop = logOutput.scrollHeight;
  }
  
  // Event listener untuk tombol Ekstrak Sitemap
  extractBtn.addEventListener("click", async () => {
    const sitemapUrl = sitemapUrlInput.value.trim();
    if (!sitemapUrl) {
      sitemapStatus.textContent = "Error: URL sitemap tidak boleh kosong.";
      return;
    }

    log("INFO: Memulai ekstraksi dari sitemap...", "info");
    sitemapStatus.textContent = "Status: Sedang mengambil dan memproses sitemap...";
    extractBtn.disabled = true;

    // Menggunakan proxy untuk menghindari masalah CORS
    const proxyUrl = "https://api.allorigins.win/raw?url=";
    
    try {
      const response = await fetch(proxyUrl + encodeURIComponent(sitemapUrl));
      if (!response.ok) {
        throw new Error(`Gagal mengambil sitemap. Status: ${response.status}`);
      }
      const sitemapText = await response.text();
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(sitemapText, "text/xml");
      const locs = xmlDoc.getElementsByTagName("loc");
      
      const urls = Array.from(locs).map(loc => loc.textContent);
      
      if (urls.length > 0) {
        urlListTextarea.value = urls.join("\n");
        sitemapStatus.textContent = `Status: Berhasil mengekstrak ${urls.length} URL.`;
        log(`SUKSES: ${urls.length} URL berhasil diekstrak dari sitemap.`, "success");
      } else {
        sitemapStatus.textContent = "Status: Tidak ada tag <loc> yang ditemukan di sitemap.";
        log("ERROR: Tidak ada URL yang ditemukan dalam sitemap.", "error");
      }
    } catch (error) {
      sitemapStatus.textContent = `Status: Gagal memproses sitemap. Error: ${error.message}`;
      log(`ERROR: ${error.message}`, "error");
    } finally {
      extractBtn.disabled = false;
    }
  });

  // Event listener untuk tombol Submit
  submitBtn.addEventListener("click", async () => {
    const apiKeyContent = apiKeyTextarea.value.trim();
    const urls = urlListTextarea.value.trim().split("\n").filter(url => url.trim() !== "");

    if (!apiKeyContent || urls.length === 0) {
      log("ERROR: Pastikan konten JSON API dan daftar URL sudah diisi.", "error");
      return;
    }

    logOutput.innerHTML = ""; // Bersihkan log sebelumnya
    log(`INFO: Memulai proses submit untuk ${urls.length} URL...`, "info");
    submitBtn.disabled = true;
    submitBtn.textContent = "Memproses...";

    try {
      // 1. Parsing Kredensial
      const credentials = JSON.parse(apiKeyContent);
      const privateKey = credentials.private_key;
      const clientEmail = credentials.client_email;

      // 2. Buat JSON Web Token (JWT)
      const header = { alg: "RS256", typ: "JWT" };
      const now = Math.floor(Date.now() / 1000);
      const claim = {
        iss: clientEmail,
        scope: "https://www.googleapis.com/auth/indexing",
        aud: "https://oauth2.googleapis.com/token",
        iat: now,
        exp: now + 3600, // Token berlaku selama 1 jam
      };
      const jwt = KJUR.jws.JWS.sign("RS256", JSON.stringify(header), JSON.stringify(claim), privateKey);

      // 3. Tukarkan JWT dengan Access Token
      const tokenResponse = await fetch("https://oauth2.googleapis.com/token", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: `grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=${jwt}`,
      });
      const tokenData = await tokenResponse.json();
      if (!tokenData.access_token) {
        throw new Error("Gagal mendapatkan access token dari Google. Periksa kembali file JSON Anda.");
      }
      const accessToken = tokenData.access_token;
      log("INFO: Access token berhasil didapatkan.", "info");

      // 4. Kirim URL ke Indexing API
      let successCount = 0;
      let failCount = 0;
      for (const url of urls) {
        const response = await fetch("https://indexing.googleapis.com/v3/urlNotifications:publish", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
          body: JSON.stringify({
            url: url.trim(),
            type: "URL_UPDATED",
          }),
        });
        
        if (response.ok) {
          log(`✔️ SUKSES: ${url.trim()}`, "success");
          successCount++;
        } else {
          const errorResult = await response.json();
          log(`❌ GAGAL: ${url.trim()} - ${errorResult.error.message}`, "error");
          failCount++;
        }
        // Jeda singkat untuk menghindari rate limit
        await new Promise(resolve => setTimeout(resolve, 200)); 
      }
      
      log("==============================", "info");
      log(`PROSES SELESAI: ${successCount} berhasil, ${failCount} gagal.`, "info");

    } catch (error) {
      log(`ERROR KRITIS: ${error.message}`, "error");
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = "Kirim ke Google Indexing API";
    }
  });
</script>
